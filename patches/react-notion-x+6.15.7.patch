diff --git a/node_modules/react-notion-x/build/index.js b/node_modules/react-notion-x/build/index.js
index d989187..c201274 100644
--- a/node_modules/react-notion-x/build/index.js
+++ b/node_modules/react-notion-x/build/index.js
@@ -1548,7 +1548,7 @@ var supportedAssetTypes = [
   "drive"
 ];
 var Asset = ({ block, zoomable = true, children }) => {
-  var _a, _b, _c, _d, _e, _f, _g;
+  var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j;
   const { recordMap, mapImageUrl, components } = useNotionContext();
   if (!block || !supportedAssetTypes.includes(block.type)) {
     return null;
@@ -1631,7 +1631,7 @@ var Asset = ({ block, zoomable = true, children }) => {
       assetStyle.objectFit = "contain";
     }
   }
-  const source = ((_b = recordMap.signed_urls) == null ? void 0 : _b[block.id]) || ((_e = (_d = (_c = block.properties) == null ? void 0 : _c.source) == null ? void 0 : _d[0]) == null ? void 0 : _e[0]);
+  let source = ((_b = recordMap.signed_urls) == null ? void 0 : _b[block.id]) || ((_e = (_d = (_c = block.properties) == null ? void 0 : _c.source) == null ? void 0 : _d[0]) == null ? void 0 : _e[0]);
   let content = null;
   if (!source) {
     return null;
@@ -1656,6 +1656,7 @@ var Asset = ({ block, zoomable = true, children }) => {
   } else if (block.type === "pdf") {
     style.overflow = "auto";
     style.background = "rgb(226, 226, 226)";
+    style.display = "block";
     if (!style.padding) {
       style.padding = "8px 16px";
     }
@@ -1715,8 +1716,11 @@ var Asset = ({ block, zoomable = true, children }) => {
       }
     }
   } else if (block.type === "image") {
+    if (source.includes("file.notion.so")) {
+      source = (_i = (_h = (_g = block.properties) == null ? void 0 : _g.source) == null ? void 0 : _h[0]) == null ? void 0 : _i[0];
+    }
     const src = mapImageUrl(source, block);
-    const caption = getTextContent((_g = block.properties) == null ? void 0 : _g.caption);
+    const caption = getTextContent((_j = block.properties) == null ? void 0 : _j.caption);
     const alt = caption || "notion image";
     content = /* @__PURE__ */ React19.createElement(LazyImage, {
       src,
@@ -2021,7 +2025,7 @@ var LinkIcon = (props) => {
 var tocIndentLevelCache = {};
 var pageCoverStyleCache = {};
 var Block = (props) => {
-  var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _A, _B, _C, _D, _E, _F, _G, _H, _I, _J, _K, _L, _M, _N, _O, _P;
+  var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _A, _B, _C, _D, _E, _F, _G, _H, _I, _J, _K, _L, _M, _N, _O, _P, _Q;
   const ctx2 = useNotionContext();
   const {
     components,
@@ -2434,16 +2438,19 @@ var Block = (props) => {
       if (!title) {
         title = getTextContent2(link);
       }
+      let isURL = false;
       if (title) {
         if (title.startsWith("http")) {
           try {
             const url = new URL(title);
             title = url.hostname;
+            isURL = true;
           } catch (err) {
           }
         }
       }
-      return /* @__PURE__ */ React28.createElement("div", {
+      const caption = block == null ? void 0 : block.properties["caption"];
+      return /* @__PURE__ */ React28.createElement(React28.Fragment, null, /* @__PURE__ */ React28.createElement("div", {
         className: "notion-row"
       }, /* @__PURE__ */ React28.createElement(components.Link, {
         target: "_blank",
@@ -2484,7 +2491,12 @@ var Block = (props) => {
         style: {
           objectFit: "cover"
         }
-      }))));
+      })))), caption && !isURL && /* @__PURE__ */ React28.createElement("figcaption", {
+        className: "notion-asset-caption"
+      }, /* @__PURE__ */ React28.createElement(Text, {
+        value: caption,
+        block
+      })));
     }
     case "toggle":
       return /* @__PURE__ */ React28.createElement("details", {
@@ -2569,11 +2581,16 @@ var Block = (props) => {
       const tableBlock = (_N = recordMap.block[block.parent_id]) == null ? void 0 : _N.value;
       const order = (_O = tableBlock.format) == null ? void 0 : _O.table_block_column_order;
       const formatMap = (_P = tableBlock.format) == null ? void 0 : _P.table_block_column_format;
+      const backgroundColor = (_Q = block.format) == null ? void 0 : _Q.block_color;
       if (!tableBlock || !order) {
         return null;
       }
       return /* @__PURE__ */ React28.createElement("tr", {
-        className: cs("notion-simple-table-row", blockId)
+        className: cs(
+          "notion-simple-table-row",
+          backgroundColor && `notion-${backgroundColor}`,
+          blockId
+        )
       }, order.map((column) => {
         var _a2, _b2, _c2;
         const color = (_a2 = formatMap == null ? void 0 : formatMap[column]) == null ? void 0 : _a2.color;
